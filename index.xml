<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>neuromantic</title>
    <link>https://liliilli.github.io/</link>
    <description>Recent content on neuromantic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 25 Apr 2020 13:28:07 +0900</lastBuildDate>
    
	<atom:link href="https://liliilli.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DirectInput8 導入メモ</title>
      <link>https://liliilli.github.io/posts/dinput8/</link>
      <pubDate>Sat, 25 Apr 2020 13:28:07 +0900</pubDate>
      
      <guid>https://liliilli.github.io/posts/dinput8/</guid>
      <description>https://en.wikipedia.org/wiki/DirectInput https://bell0bytes.eu/directinput/ https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ee416842(v=vs.85)?redirectedfrom=MSDN https://docs.microsoft.com/ko-kr/windows/win32/xinput/xinput-and-directinput?redirectedfrom=MSDN DirectInputとは DirectInputは、キーボード、マウス、そして各種のコントローラーを含んでほぼ同一な挙動制御をサポー</description>
    </item>
    
    <item>
      <title>TLSF Allocatorを作ってみた</title>
      <link>https://liliilli.github.io/posts/tlsf_basic/</link>
      <pubDate>Sun, 15 Mar 2020 19:13:14 +0900</pubDate>
      
      <guid>https://liliilli.github.io/posts/tlsf_basic/</guid>
      <description>TLSFとは何なのか http://www.gii.upv.es/tlsf/ http://www.gii.upv.es/tlsf/files/ecrts04_tlsf.pdf https://www.researchgate.net/publication/234785757_A_comparison_of_memory_allocators_for_real-time_applications TLSF（Two-Level Segregate Fit）は、リアルタイムで要求される速度、安定性、決定性（Deterministic</description>
    </item>
    
    <item>
      <title>行列変数のネーミングについて</title>
      <link>https://liliilli.github.io/posts/matrix_name/</link>
      <pubDate>Fri, 13 Mar 2020 13:11:47 +0900</pubDate>
      
      <guid>https://liliilli.github.io/posts/matrix_name/</guid>
      <description>https://www.sebastiansylvan.com/post/matrix_naming_convention/ D3Dスタイル（Row-Major、左から右へ演算していくスタイル）でやると、 vector4_t transformed_point = point * M * A; が普通だけど、このままじゃ後でまた見る時に何</description>
    </item>
    
    <item>
      <title>自分でやるDyのCMakeListsファイル説明</title>
      <link>https://liliilli.github.io/posts/dy_cmake/</link>
      <pubDate>Sun, 08 Mar 2020 11:48:19 +0900</pubDate>
      
      <guid>https://liliilli.github.io/posts/dy_cmake/</guid>
      <description>はじめに 自分の個人プロジェクトのDyという、ゲームエンジンプロジェクトがあって、たまに時間がある時開発をしています。ですけど今は表じゃなく裏</description>
    </item>
    
    <item>
      <title>CMakeのメモまとめ</title>
      <link>https://liliilli.github.io/posts/cmake_memo/</link>
      <pubDate>Tue, 03 Mar 2020 23:59:05 +0900</pubDate>
      
      <guid>https://liliilli.github.io/posts/cmake_memo/</guid>
      <description>https://cliutils.gitlab.io/modern-cmake/chapters/intro/dodonot.html https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1 Do&amp;rsquo;s and Don&amp;rsquo;ts CMakeで避けるべきのパターン https://cliutils.gitlab.io/modern-cmake/chapters/intro/dodonot.html https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1 link_directories、include_librariesなどのグローバル関数を使わ</description>
    </item>
    
    <item>
      <title>Hugoブログを使いこなせるためのメモ</title>
      <link>https://liliilli.github.io/posts/hugo_memo/</link>
      <pubDate>Tue, 03 Mar 2020 23:10:28 +0900</pubDate>
      
      <guid>https://liliilli.github.io/posts/hugo_memo/</guid>
      <description>すごく久しぶりにHugoのブログを使おうとしましたが、ブログに記事を書くどころかHugoの使い方すらすっかり忘れてしまいました。だもんで自分</description>
    </item>
    
    <item>
      <title>C&#43;&#43;2aのconceptsを使ってみた。</title>
      <link>https://liliilli.github.io/posts/cpp_concept/</link>
      <pubDate>Thu, 21 Nov 2019 20:33:04 +0900</pubDate>
      
      <guid>https://liliilli.github.io/posts/cpp_concept/</guid>
      <description>C++のConceptを簡略説明 C++2a（20）から追加する文法の一つであるconceptは、あるタイプの制約条件を記すことができる識別子</description>
    </item>
    
    <item>
      <title>ShaderToyでPBRを書いてから、自ら解説してみた。</title>
      <link>https://liliilli.github.io/posts/shadertoy_pbr/</link>
      <pubDate>Sat, 16 Nov 2019 19:51:58 +0900</pubDate>
      
      <guid>https://liliilli.github.io/posts/shadertoy_pbr/</guid>
      <description>実は2週前に、ShaderToyというウェブでGLSLがかけて、それをレンダリングすることができるサイトで、上のシェーダーを書いてました。前</description>
    </item>
    
    <item>
      <title>Chained-Group Allocationパターンについてメモ</title>
      <link>https://liliilli.github.io/posts/chained-group-allocation/</link>
      <pubDate>Sat, 09 Nov 2019 22:15:34 +0900</pubDate>
      
      <guid>https://liliilli.github.io/posts/chained-group-allocation/</guid>
      <description>https://www.plflib.org/chained_group_allocation_pattern.htm を見て、分かったことをメモしたいと思います。 Abstract Chanined-Group Allocationパターンは、ダブルリンクリストを拡張して、書くノードは付加的な情報を持</description>
    </item>
    
  </channel>
</rss>